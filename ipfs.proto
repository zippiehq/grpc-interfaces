// Copyright 2019 Cartesi Pte. Ltd.

// Licensed under the Apache License, Version 2.0 (the "License"); you may not use
// this file except in compliance with the License. You may obtain a copy of the
// License at http://www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing, software distributed
// under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
// CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.


syntax = "proto3";
option go_package = ".;ipfs";

package CartesiIpfs;

service Ipfs {
    rpc GetFile (GetFileRequest) returns (GetFileResponse) {}
    rpc AddFile (AddFileRequest) returns (AddFileResponse) {}
    // CacheMerkleRootHash caches value of merkle root hash for given ipfs_path and log_2_size.
    // GetFile will use cached merkle root hash instead of computing it.
    rpc CacheMerkleRootHash(CacheMerkleRootHashRequest) returns (CacheMerkleRootHashResponse) {}
}

message GetFileRequest {
    string ipfs_path = 1;
    uint32 log2_size = 2;
    string output_path = 3;
    uint64 timeout = 4;
    bool export_dag = 5;
}

message Progress {
    uint64 progress = 1;
    uint64 updated_at = 2;
}

message GetFileResult {
    string output_path = 1;
    Hash root_hash = 2;
}

message GetFileResponse {
    oneof get_oneof {
        Progress progress = 1;
        GetFileResult result = 2;
    }
}

message AddFileRequest {
    string file_path = 1;
}

message AddFileResult {
    string ipfs_path = 1;
}

message AddFileResponse {
    oneof add_oneof {
        Progress progress = 1;
        AddFileResult result = 2;
    }
}

message Hash {
    bytes data = 1;
}

message CacheMerkleRootHashRequest {
    string ipfs_path = 1;
    uint32 log2_size = 2;
    Hash merkle_root_hash = 3;
}

message CacheMerkleRootHashResponse {}